#summary Crash course on installing and using EARS
#labels howTo,project

=Installing EARS=

==Requirements and prerequisites==

The sources have only two hard dependencies: the [http://sourceforge.net/projects/lemur/ Lemur toolkit] and the STL (which comes with all sane C++ compilers).

===Installing the Lemur toolkit===
See the [http://sourceforge.net/apps/trac/lemur/wiki/Compiling%20and%20Installing Compiling and Installing] section on the [http://sourceforge.net/apps/trac/lemur/wiki Lemur Toolkit and Indri Search Engine Wiki].

Note: EARS has been tested with the following versions of the Lemur toolkit: 4.3, 4.4, 4.7, 4.8, 4.9, 4.10

==Installing and compiling==
  # download and extract EARS
  # open `Makefile` and set the value of the `Lemur_dir` variable according to your local settings
  # The build is fairly conventional. Go to the EARS directory, and type `make`
    * If you need to re-compile it for any reason, you may want to issue `make clean` and then `make` 

=Using EARS=

Usage will be demonstrated on the [ExampleDataSet "ILPS Abstracts" data set], shipped with the EARS distribution. 

==Indexing the collection==
The document collection needs to be indexed using the Lemur toolkit.

  # Change to the `EARS` directory<br>_This step is crucial as paths are set relative to this directory. Alternatively, you may edit the config files and change the paths to absolute ones._
  # Execute either of the two:
    * `{Lemur_dir}/bin/IndriBuildIndex examples/ilps_abstracts/conf/IndriBuildIndex.conf examples/ilps_abstracts/stopwords/stopwords.indri` for building an Indri index (preferred)
    * `{Lemur_dir}/bin/BuildIndex examples/ilps_abstracts/conf/BuildIndex.conf` for building a !KeyFile index,
where `{Lemur_dir}` is the location of your Lemur installation.

More details about the indexing process and the differences between index types are given on [http://sourceforge.net/apps/trac/lemur/wiki/Building%20Indexes this page].

==Finding and profiling entities==
EARS can help you in two entity related tasks:
  * *finding entities* is about retrieving entities for a query topic (_"Which entities are associated with the topic?"_). In our example, we rank people with respect to their expertise given a particular topical area. Therefore, for each query, a ranked list of entities (names) is returned. 
  * *entity profiling* is the other way around: for each entity we return topics (_"Which topics are associated with the entity?"_) In our example, topics are ranked according to the person's proficiency in each. 

Learn more about the tasks and the association finding models [Models here].


There are sample config files for the two baseline models in the `examples/ilps_abstracts/conf` directory: `ears_model1.conf` and `ears_model2.conf` for Models 1 and 2, respectively. 
  * If you indexed the collection using a !KeyFile index, you need to edit these files and replace the line `<index>examples/ilps_abstracts/index</index>` <br>with `<index>examples/ilps_abstracts/index/index.key</index>`


  # Change to the `EARS` directory
  # 
  # If you indexed the collection using a 
  # Execute `ears ef examples/ilps_abstracts/conf/ears_model1.conf`